[package]
name = "stones"
version = "0.1.0"
edition = "2021"
publish = false
resolver = "2"
authors = ["Favil Orbedios <favilo@gmail.com>"]

[workspace]
members = ["mobile"]

[lib]
# crate-type = ["rlib", "cdylib"]
name = "stones"
path = "src/lib.rs"

[[bin]]
name = "mancala"
path = "src/bin.rs"

[profile.dev]
lto = false
opt-level = 1
debug = true

# Enable high optimizations for dependencies (incl. Bevy), but not for our code:
[profile.dev.package."*"]
opt-level = 3
debug = true

[profile.release]
# Compile the entire crate as one unit.
# Slows compile times, marginal improvements.
codegen-units = 1
# Do a second optimization pass over the entire program, including dependencies.
# Slows compile times, marginal improvements.
lto = "thin"

[profile.web]
inherits = "dev"
opt-level = "s"

[profile.web-release]
# Default to release profile values.
inherits = "release"
# Optimize with size in mind (also try "z", sometimes it is better).
# Slightly slows compile times, great improvements to file size and runtime performance.
opt-level = "z"
# Strip all debugging information from the binary to slightly reduce file size.
strip = "debuginfo"

# Profile for distribution
[profile.dist]
inherits = "release"
opt-level = 3
strip = true
debug = false


[dependencies]
avian3d = { version = "0.2.0", features = ["simd", "serialize"] }
bevy_asset_loader = { version = "0.22.0", features = [
    "3d",
    "progress_tracking",
    "standard_dynamic_assets",
] }
bevy = { version = "0.15.1", default-features = true }
bevy_mod_billboard = { git = "https://github.com/voximity/bevy_mod_billboard", branch = "migrate-0.15" }
bevy_prefs_lite = { git = "https://github.com/favilo/bevy_prefs_lite.git", branch = "android" }
# bevy_mod_picking = { version = "0.20.1", features = [] }
# bevy_obj = "0.15"
# blenvy = { git = "https://github.com/ptsd/Blenvy.git", branch = "blenvy-bevy-0.15" }
iyes_progress = { version = "0.13.1", features = [] }
rmp-serde = "1.3.0"
serde = "1.0.217"
serde_json = "1.0.136"
thiserror = "2.0.11"
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.19", features = [
    "tracing-log",
    "env-filter",
] }
log = { version = "0.4", features = [
    "max_level_debug",
    "release_max_level_warn",
] }
webbrowser = { version = "1", features = ["hardened"] }
rayon = "1.10.0"
bevy-sequential-actions = "0.12.0"

[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = "0.2.100"

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
# bevy = { version = "0.15.1", default-features = true, features = [
#     "file_watcher",
# ] }

[target.'cfg(not(target_os = "android"))'.dependencies]
# bevy-inspector-egui = { git = "https://github.com/jakobhellermann/bevy-inspector-egui.git", branch = "v0.28.1", version = "0.28.1" }
bevy-inspector-egui = { version = "0.28.1" }


[features]
defaults = []
dynamic_linking = ["bevy/dynamic_linking"]
dev = ["dynamic_linking"]

# [patch.crates-io]
# bevy_mod_picking = { git = "https://github.com/StrikeForceZero/bevy_mod_picking.git", branch = "bevy-0.13" }


[workspace.lints.clippy]
doc_markdown = "warn"
manual_let_else = "warn"
match_same_arms = "warn"
redundant_closure_for_method_calls = "warn"
redundant_else = "warn"
semicolon_if_nothing_returned = "warn"
type_complexity = "allow"
undocumented_unsafe_blocks = "warn"
unwrap_or_default = "warn"
needless_lifetimes = "allow"
too_many_arguments = "allow"

ptr_as_ptr = "warn"
ptr_cast_constness = "warn"
ref_as_ptr = "warn"

# see: https://github.com/bevyengine/bevy/pull/15375#issuecomment-2366966219
too_long_first_doc_paragraph = "allow"

std_instead_of_core = "warn"
std_instead_of_alloc = "warn"
alloc_instead_of_core = "warn"

allow_attributes = "warn"
allow_attributes_without_reason = "warn"

[workspace.lints.rust]
missing_docs = "warn"
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(docsrs_dep)'] }
unsafe_code = "deny"
unsafe_op_in_unsafe_fn = "warn"
unused_qualifications = "warn"

# Unfortunately, cargo does not currently support overriding workspace lints
# inside a particular crate. See https://github.com/rust-lang/cargo/issues/13157
#
# We require an override for cases like `std_instead_of_core`, which are intended
# for the library contributors and not for how users should consume Bevy.
# To ensure examples aren't subject to these lints, below is a duplication of the
# workspace lints, with the "overrides" applied.
#
# [lints]
# workspace = true

[lints.clippy]
doc_markdown = "warn"
manual_let_else = "warn"
match_same_arms = "warn"
redundant_closure_for_method_calls = "warn"
redundant_else = "warn"
semicolon_if_nothing_returned = "warn"
type_complexity = "allow"
undocumented_unsafe_blocks = "warn"
unwrap_or_default = "warn"
needless_lifetimes = "allow"
too_many_arguments = "allow"

ptr_as_ptr = "warn"
ptr_cast_constness = "warn"
ref_as_ptr = "warn"

too_long_first_doc_paragraph = "allow"

std_instead_of_core = "allow"
std_instead_of_alloc = "allow"
alloc_instead_of_core = "allow"

allow_attributes = "warn"
allow_attributes_without_reason = "warn"

[lints.rust]
missing_docs = "warn"
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(docsrs_dep)'] }
unsafe_code = "deny"
unsafe_op_in_unsafe_fn = "warn"
unused_qualifications = "warn"
